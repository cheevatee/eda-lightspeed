---
- name: Handle Alertmanager alerts from EDA
  hosts: localhost
  gather_facts: false

  vars:
    # Safe fallback pulled from the EDA-injected context
    alerts_from_eda: >-
      {{
        (ansible_eda.event.payload.alerts)
        if (ansible_eda is defined
            and ansible_eda.event is defined
            and ansible_eda.event.payload is defined
            and ansible_eda.event.payload.alerts is defined)
        else []
      }}

  tasks:
    - name: Choose alerts from extra_vars if provided, else use EDA fallback
      set_fact:
        alerts_effective: "{{ (alerts if (alerts is defined) else alerts_from_eda) }}"

    - name: Quick sanity check of the data type and count
      debug:
        msg:
          - "type={{ alerts_effective | type_debug }}"
          - "count={{ (alerts_effective | length) if (alerts_effective is iterable) else 'N/A' }}"

    - name: Print each alert (if any)
      when: alerts_effective is iterable and (alerts_effective | length) > 0
      loop: "{{ alerts_effective }}"
      loop_control:
        label: "{{ (item.labels.alertname | default('unknown')) ~ ' (' ~ (item.status | default('')) ~ ')' }}"
      debug:
        msg: |
          [ALERT]
          status:      {{ item.status | default('') }}
          alertname:   {{ item.labels.alertname | default('') }}
          severity:    {{ item.labels.severity | default('') }}
          namespace:   {{ item.labels.namespace | default('') }}
          instance:    {{ item.labels.instance | default('') }}
          startsAt:    {{ item.startsAt | default('') }}
          endsAt:      {{ item.endsAt | default('') }}
          summary:     {{ item.annotations.summary | default('') }}
          description: {{ item.annotations.description | default('') }}
          labels:      {{ item.labels | default({}) }}
          annotations: {{ item.annotations | default({}) }}
